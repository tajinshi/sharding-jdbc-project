server.port=8080
spring.application.name=sharding-jdbc
server.servlet.context-path=/
spring.http.encoding.charset=utf-8
spring.http.encoding.force=true
spring.http.encoding.enabled=true
#表示后发现的bean会覆盖之前相同名称的bean
spring.main.allow-bean-definition-overriding=true
#该配置项就是指将带有下划线的表字段映射为驼峰格式的实体类属性，如果不使用mybatis配置，则需要使用as重命名，不过这样要敲很多键盘
mybatis.configuration.map-underscore-to-camel-case=true

#配置sharding jdbc，水平分表，单表
#比如一个学生表t_student进行水平拆分t_student_1,t_student_2，其他表的配置不变
#配置数据源
spring.shardingsphere.datasource.names=ds0

spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.url=jdbc:mysql://localhost:3306/student_01
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=root

#配置表数据节点
spring.shardingsphere.sharding.tables.t_student.actual-data-nodes=ds0.t_student_$->{1..2}

#配置主键生成策略,雪花生成算法
spring.shardingsphere.sharding.tables.t_student.key-generator.column=student_id
spring.shardingsphere.sharding.tables.t_student.key-generator.type=SNOWFLAKE

#分片策略->分片算法，分片键
spring.shardingsphere.sharding.tables.t_student.table-strategy.inline.sharding-column=student_id
spring.shardingsphere.sharding.tables.t_student.table-strategy.inline.algorithm-expression=t_student_$->{student_id % 2+1}
#展示sql
spring.shardingsphere.props.sql.show=true



