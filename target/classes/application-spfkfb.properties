#水平分表+水平分库
server.port=8080
spring.application.name=sharding-jdbc
server.servlet.context-path=/
spring.http.encoding.charset=utf-8
spring.http.encoding.force=true
spring.http.encoding.enabled=true
#表示后发现的bean会覆盖之前相同名称的bean
spring.main.allow-bean-definition-overriding=true
#该配置项就是指将带有下划线的表字段映射为驼峰格式的实体类属性，如果不使用mybatis配置，则需要使用as重命名，不过这样要敲很多键盘
mybatis.configuration.map-underscore-to-camel-case=true

#配置sharding jdbc 水平分库，分表
#比如一个学生表，一个学生详清表t_student,t_student_detail俩个表，进行水平拆分，分为4个表，t_student_1,t_student_2,t_student_detail_1,t_student_detail_2
#配置数据源
spring.shardingsphere.datasource.names=ds0,ds1

spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.url=jdbc:mysql://localhost:3306/student_01
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=root

spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.url=jdbc:mysql://localhost:3306/student_02
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=root

#分库策略
#水平分库,根据用户id,确定存储在ds0,还是ds1
spring.shardingsphere.sharding.tables.t_student.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.t_student.database-strategy.inline.algorithm-expression=ds$->{user_id % 2}
spring.shardingsphere.sharding.tables.t_student_detail.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.t_student_detail.database-strategy.inline.algorithm-expression=ds$->{user_id % 2}

#配置表数据节点t_student
spring.shardingsphere.sharding.tables.t_student.actual-data-nodes=ds$->{0..1}.t_student_$->{1..2}
spring.shardingsphere.sharding.tables.t_student_detail.actual-data-nodes=ds$->{0..1}.t_student_detail_$->{1..2}

#分片策略->分片算法，分片键 t_student
spring.shardingsphere.sharding.tables.t_student.table-strategy.inline.sharding-column=student_id
spring.shardingsphere.sharding.tables.t_student.table-strategy.inline.algorithm-expression=t_student_$->{student_id % 2+1}
#分片策略->分片算法，分片键 t_student_detail,这个主键是student_id所以不用配置主键生成策略
spring.shardingsphere.sharding.tables.t_student_detail.table-strategy.inline.sharding-column=student_id
spring.shardingsphere.sharding.tables.t_student_detail.table-strategy.inline.algorithm-expression=t_student_detail_$->{student_id % 2 +1}

#配置主键生成策略,雪花生成算法
spring.shardingsphere.sharding.tables.t_student.key-generator.column=student_id
spring.shardingsphere.sharding.tables.t_student.key-generator.type=SNOWFLAKE


#绑定表规则列表
spring.shardingsphere.sharding.binding-tables[0]=t_student,t_student_detail
#配置公共表,广播表
spring.shardingsphere.sharding.broadcast-tables=t_dect

#展示sql
spring.shardingsphere.props.sql.show=true



